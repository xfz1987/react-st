React 组件的更新方式

---------------------------------------------------
state 的直接改变
state 的更新一般是通过在组件内部执行 this.setState 操作, 
但是 setState 表现像异步操作(其实是同步操作)，
它只是执行将要修改的状态放在一个执行队列中，
React 会出于性能考虑，把多个 setState 的操作合并成一次进行执行

shouldComponentUpdate
componentWillUpdate
render()
componentDidUpdate
---------------------------------------------------

---------------------------------------------------
props 的改变
除了 state 会导致组件更新外，外部传进来的 props 也会使组件更新，但是这种是当子组件直接使用父组件的 props 来渲染

当 props 更新时，子组件将会渲染更新，其运行顺序如下
componentWillReceiveProps (nextProps)
static getDerivedStateFromProps()
shouldComponentUpdate
componentWillUpdate
render
getSnapshotBeforeUpdate()
componentDidUpdate
--------------------------------------------------

React 的组件更新过程
当某个 React 组件发生更新时（state 或者 props 发生改变），React 将会根据新的状态构建一棵新的 Virtual DOM 树，
然后使用 diff 算法将这个 Virtual DOM 和 之前的 Virtual DOM 进行对比，如果不同则重新渲染。
React 会在渲染之前会先调用 shouldComponentUpdate 这个函数是否需要重新渲染，
React 中 shouldComponentUpdate 函数的默认返回值是 true，
所以组件中的任何一个位置发生改变了，组件中其他不变的部分也会重新渲染。
当一个组件渲染的机构很简单的时候，这种因为某个状态改变引起整个组件改变的影响可能不大，
但是当组件渲染很复杂的时候,比如一个很多节点的树形组件，当更改某一个叶子节点的状态时，整个树形都会重新渲染，
即使是那些状态没有更新的节点，这在某种程度上耗费了性能，导致整个组件的渲染和更新速度变慢，从而影响用户体验。

*************************************************
PureComponent 的浅比较
基于上面提到的性能问题，所以 React 又推出了 PureComponent， 和它有类似功能的是 PureRenderMixin 插件，
PureRenderMixin 插件实现了 shouldComponentUpdate 方法, 该方法主要是执行了一次浅比较，代码如下：
function shallowCompare(instance, nextProps, nextState) {
  return (
    !shallowEqual(instance.props, nextProps) ||
    !shallowEqual(instance.state, nextState)
  );
}

PureComponent 判断是否需要更新的逻辑和 PureRenderMixin 插件一样
if (this._compositeType === CompositeTypes.PureClass) {
    shouldUpdate =
        !shallowEqual(prevProps, nextProps) ||
        !shallowEqual(inst.state, nextState);
}

利用上述两种方法虽然可以避免没有改变的元素发生不必要的重新渲染，但是使用上面的这种浅比较还是会带来一些问题
假如传给某个组件的 props 的数据结构如下所示
const data = {
   list: [{
      name: 'aaa',
      sex: 'man'
   },{
      name: 'bbb',
      sex: 'woman'
   }],
   status: true,
}
由于上述的 data 数据是一个引用类型，当更改了其中的某一字段，并期望在改变之后组件可以重新渲染的时候，
发现使用 PureComponent 的时候，发现组件并没有重新渲染，因为更改后的数据和修改前的数据使用的同一个内存，
所有比较的结果永远都是 false, 导致组件并没有重新渲染

**********************************************************

解决问题的几种方式
1.使用 lodash 的深拷贝
import _ from "lodash";

const data = {
   list: [{
     name: 'aaa',
     sex: 'man'
   }, {
     name: 'bbb',
     sex: 'woman'
   }],
   status: true,
}
const newData = _.cloneDeepWith(data);
shallowEqual(data, newData) //false
 
//更改其中的某个字段再比较
newData.list[0].name = 'ccc';
shallowEqual(data.list, newData.list)  //false
这种方式就是先深拷贝复杂类型，然后更改其中的某项值，这样两者使用的是不同的引用地址，自然在比较的时候返回的就是 false，
但是有一个缺点是这种深拷贝的实现会耗费很多内存

2.使用JSON.stringify()
  const data = {
    list: [{
      name: 'aaa',
      sex: 'man'
    }, {
      name: 'bbb',
      sex: 'woman'
    }],
    status: true,
    c: function(){
      console.log('aaa')
    }
  }
 
 const newData = JSON.parse(JSON.stringify(data))
 shallowEqual(data, newData) //false
 
  //更改其中的某个字段再比较
  newData.list[0].name = 'ccc';
  shallowEqual(data.list, newData.list)  //false
这种方式其实就是深拷贝的一种变种形式，它的缺点除了和上面那种一样之外，
还有两点就是如果你的对象里有函数,函数无法被拷贝下来，同时也无法拷贝 copyObj 对象原型链上的属性和方法

3.ES6 解构(不行，放弃)
  const data = {
    list: [{
      name: 'aaa',
      sex: 'man'
    }, {
      name: 'bbb',
      sex: 'woman'
    }],
    status: true,
  }
  
  const newData =  {...data};
  console.log(shallowEqual(data, newData));  //false
  
  console.log(shallowEqual(data, newData));  //true
  //添加一个字段
  newData.status = false;
  console.log(shallowEqual(data, newData));  //false
  //修改复杂类型的某个字段
  newData.list[0].name = 'abbb';
  console.log(shallowEqual(data, newData));  //true

通过上面的测试可以发现： 当修改数据中的简单类型的变量的时候，使用解构是可以解决问题的,但是当修改其中的复杂类型的时候就不能检测到

以上方式都存在各种问题，那么下面正解来了

immutability-helper
一个基于 Array 和 Object 操作的库，就一个文件但是使用起来很方便

   import update from 'immutability-helper';
    
    const data = {
    list: [{
      name: 'aaa',
      sex: 'man'
    }, {
      name: 'bbb',
      sex: 'woman'
    }],
    status: true,
  }
  
   const newData = update(data, { list: { 0: { name: { $set: "bbb" } } } });
   console.log(this.shallowEqual(data, newData));  //false

   //当只发生如下改变时
   const newData = update(data,{status:{$set: false}});
   console.log(this.shallowEqual(data, newData));  //false
   console.log(this.shallowEqual(data.list, newData.list));  //true

immutability-helper-x

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
immutable（不可变对象，一旦创建不可更改）
* npm install immutable
* 使用
let { Map } = require('immutable');
let m1 = Map({ a: 1, b: 2, c: 3 });
console.log(m1.get('a'));//1
let m2 = m1.set('a', '11');
console.log(m2.get('a'));//11
console.log(m1.get('a'));//1
console.log(m1 === m2);//false

-- Immutable Data 就是一旦创建，就不能再被更改的数据。对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象
-- Immutable 实现的原理是 Persistent Data Structure（持久化数据结构），也就是使用旧数据创建新数据时，要保证旧数据同时可用且不变
-- 同时为了避免 deepCopy 把所有节点都复制一遍带来的性能损耗，Immutable 使用了 Structural Sharing（结构共享），
   即如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其它节点则进行共享

let { Map,fromJS } = require('immutable');
let m1 = fromJS({ a: 1, b: { c: 1 } });
let m2 = m1.set('a', 11);
console.log(m1.get('a'));//1
console.log(m2.get('a'));//11
console.log(m1.b === m2.b);//true
let m2 = m1.setIn(['b', 'c'], 'c');//修改多级
let m2 = m1.updateIn(['b', 'c'], val => val + 2);//updateIn,传入一个回调
console.log(m2.getIn(['b', 'c']));//获取多级

问题：immutable虽然很强大，但使用与普通js不一样，压缩后库还是比较大的20多k
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
seamless-immutable
使用Object.defineProperty扩展了 JavaScript的Array和Object对象来实现，只支持 Array 和 Object 两种数据类型
let Immutable=require('seamless-immutable');
let objA=Immutable({info: {age: 8}});
let objB=objA.merge({info: {age: 9}});
console.log(objA.info.age);
console.log(objB.info.age);
优缺点：用法简单，比较小。但是功能不强大
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

……………………………………………………………………………………………………………………………………………………………………………
【React使用】
import React from "react"
import PureRenderMixin from "react-addons-pure-render-mixin"
import { Map } from "immutable"

var Test = React.createClass( {
  mixins: [ PureRenderMixin ],
  getInitialState: function () {
    return { value: Map( { foo: "bar" }) }
  },
  onClick: function () {
    this.setState(( {value}) => ( {
      value: value.set( "foo", "bar" )
    }) )
  },
  render: function () {
    console.log( "re-render" )
    return (
      click
    )
  }
})

var Test = React.createClass( {
  getInitialState: function () {
    return { value: Map( { foo: "bar" }) };
  },
  onClick: function () {
    this.setState(( {value}) => ( {
      value: value.update( "foo", v => v + "bar" )
    }) );
  },
  render: function () {
    return (
      

        
        Click me
      

    );
  }
});

……………………………………………………………………………………………………………………………………………………………………………

getInitialState() {
    return {
      data: Map({ times: 0 })
    }
  },
  handleAdd() {
    this.setState({ data: this.state.data.update('times', v => v + 1) });
    // 这时的 times 并不会改变
    console.log(this.state.data.get('times'));
  }


上面的 handleAdd 可以简写成：

  handleAdd() {
    this.setState(({data}) => ({
      data: data.update('times', v => v + 1) })
    });
  }